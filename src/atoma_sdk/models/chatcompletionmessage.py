"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .messagecontent import MessageContent, MessageContentTypedDict
from .toolcall import ToolCall, ToolCallTypedDict
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class RoleTool(str, Enum):
    TOOL = "tool"


class ToolTypedDict(TypedDict):
    r"""The role of the messages author, in this case tool."""

    role: RoleTool
    content: NotRequired[Nullable[MessageContentTypedDict]]
    tool_call_id: NotRequired[str]
    r"""Tool call that this message is responding to."""


class Tool(BaseModel):
    r"""The role of the messages author, in this case tool."""

    role: RoleTool

    content: OptionalNullable[MessageContent] = UNSET

    tool_call_id: Optional[str] = None
    r"""Tool call that this message is responding to."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "tool_call_id"]
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RoleAssistant(str, Enum):
    ASSISTANT = "assistant"


class AssistantTypedDict(TypedDict):
    r"""The role of the messages author, in this case assistant."""

    role: RoleAssistant
    content: NotRequired[Nullable[MessageContentTypedDict]]
    name: NotRequired[Nullable[str]]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    tool_calls: NotRequired[List[ToolCallTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class Assistant(BaseModel):
    r"""The role of the messages author, in this case assistant."""

    role: RoleAssistant

    content: OptionalNullable[MessageContent] = UNSET

    name: OptionalNullable[str] = UNSET
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    tool_calls: Optional[List[ToolCall]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "name", "refusal", "tool_calls"]
        nullable_fields = ["content", "name", "refusal"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RoleUser(str, Enum):
    USER = "user"


class UserTypedDict(TypedDict):
    r"""The role of the messages author, in this case user."""

    role: RoleUser
    content: NotRequired[Nullable[MessageContentTypedDict]]
    name: NotRequired[Nullable[str]]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class User(BaseModel):
    r"""The role of the messages author, in this case user."""

    role: RoleUser

    content: OptionalNullable[MessageContent] = UNSET

    name: OptionalNullable[str] = UNSET
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "name"]
        nullable_fields = ["content", "name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RoleSystem(str, Enum):
    SYSTEM = "system"


class SystemTypedDict(TypedDict):
    r"""The role of the messages author, in this case system."""

    role: RoleSystem
    content: NotRequired[Nullable[MessageContentTypedDict]]
    name: NotRequired[Nullable[str]]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class System(BaseModel):
    r"""The role of the messages author, in this case system."""

    role: RoleSystem

    content: OptionalNullable[MessageContent] = UNSET

    name: OptionalNullable[str] = UNSET
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "name"]
        nullable_fields = ["content", "name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


ChatCompletionMessageTypedDict = TypeAliasType(
    "ChatCompletionMessageTypedDict",
    Union[SystemTypedDict, UserTypedDict, ToolTypedDict, AssistantTypedDict],
)
r"""A message that is part of a conversation which is based on the role
of the author of the message.

This is used to represent the message in the chat completion request.
It can be either a system message, a user message, an assistant message, or a tool message.
"""


ChatCompletionMessage = TypeAliasType(
    "ChatCompletionMessage", Union[System, User, Tool, Assistant]
)
r"""A message that is part of a conversation which is based on the role
of the author of the message.

This is used to represent the message in the chat completion request.
It can be either a system message, a user message, an assistant message, or a tool message.
"""
