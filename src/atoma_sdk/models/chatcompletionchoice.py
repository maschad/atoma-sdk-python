"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatcompletionlogprobs import (
    ChatCompletionLogProbs,
    ChatCompletionLogProbsTypedDict,
)
from .chatcompletionmessage import ChatCompletionMessage, ChatCompletionMessageTypedDict
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ChatCompletionChoiceTypedDict(TypedDict):
    r"""Represents the chat completion choice.

    This is used to represent the chat completion choice in the chat completion request.
    It can be either a chat completion message or a chat completion chunk.
    """

    index: int
    r"""The index of this choice in the list of choices."""
    message: ChatCompletionMessageTypedDict
    r"""A message that is part of a conversation which is based on the role
    of the author of the message.

    This is used to represent the message in the chat completion request.
    It can be either a system message, a user message, an assistant message, or a tool message.
    """
    finish_reason: NotRequired[Nullable[str]]
    r"""The reason the chat completion was finished."""
    logprobs: NotRequired[Nullable[ChatCompletionLogProbsTypedDict]]


class ChatCompletionChoice(BaseModel):
    r"""Represents the chat completion choice.

    This is used to represent the chat completion choice in the chat completion request.
    It can be either a chat completion message or a chat completion chunk.
    """

    index: int
    r"""The index of this choice in the list of choices."""

    message: ChatCompletionMessage
    r"""A message that is part of a conversation which is based on the role
    of the author of the message.

    This is used to represent the message in the chat completion request.
    It can be either a system message, a user message, an assistant message, or a tool message.
    """

    finish_reason: OptionalNullable[str] = UNSET
    r"""The reason the chat completion was finished."""

    logprobs: OptionalNullable[ChatCompletionLogProbs] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["finish_reason", "logprobs"]
        nullable_fields = ["finish_reason", "logprobs"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
