"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .logprobs import LogProbs, LogProbsTypedDict
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CompletionChoiceTypedDict(TypedDict):
    r"""A completion choice response"""

    finish_reason: str
    r"""The reason the model stopped generating tokens"""
    index: int
    r"""The index of the choice in the list of choices"""
    text: str
    r"""The generated text"""
    logprobs: NotRequired[Nullable[LogProbsTypedDict]]


class CompletionChoice(BaseModel):
    r"""A completion choice response"""

    finish_reason: str
    r"""The reason the model stopped generating tokens"""

    index: int
    r"""The index of the choice in the list of choices"""

    text: str
    r"""The generated text"""

    logprobs: OptionalNullable[LogProbs] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["logprobs"]
        nullable_fields = ["logprobs"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
