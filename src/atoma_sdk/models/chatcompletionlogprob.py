"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class ChatCompletionLogProbTypedDict(TypedDict):
    r"""Represents the chat completion log prob.

    This is used to represent the chat completion log prob in the chat completion request.
    It can be either a chat completion log prob or a chat completion log prob choice.
    """

    logprob: float
    r"""The log prob of the chat completion."""
    token: str
    r"""The token of the chat completion."""
    bytes_: NotRequired[Nullable[List[int]]]
    r"""A list of integers representing the UTF-8 bytes representation of the token.
    Useful in instances where characters are represented by multiple tokens and their byte
    representations must be combined to generate the correct text representation.
    Can be null if there is no bytes representation for the token.
    """


class ChatCompletionLogProb(BaseModel):
    r"""Represents the chat completion log prob.

    This is used to represent the chat completion log prob in the chat completion request.
    It can be either a chat completion log prob or a chat completion log prob choice.
    """

    logprob: float
    r"""The log prob of the chat completion."""

    token: str
    r"""The token of the chat completion."""

    bytes_: Annotated[OptionalNullable[List[int]], pydantic.Field(alias="bytes")] = (
        UNSET
    )
    r"""A list of integers representing the UTF-8 bytes representation of the token.
    Useful in instances where characters are represented by multiple tokens and their byte
    representations must be combined to generate the correct text representation.
    Can be null if there is no bytes representation for the token.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["bytes"]
        nullable_fields = ["bytes"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
