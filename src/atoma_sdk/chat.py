"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from atoma_sdk import models, utils
from atoma_sdk._hooks import HookContext
from atoma_sdk.types import OptionalNullable, UNSET
from atoma_sdk.utils import eventstreaming, get_security_from_env
from typing import Any, Dict, List, Mapping, Optional, Union


class Chat(BaseSDK):
    r"""OpenAI's API chat completions v1 endpoint"""

    def create(
        self,
        *,
        messages: Union[
            List[models.ChatCompletionMessage],
            List[models.ChatCompletionMessageTypedDict],
        ],
        model: str,
        frequency_penalty: OptionalNullable[float] = UNSET,
        function_call: Optional[Any] = None,
        functions: OptionalNullable[List[Any]] = UNSET,
        logit_bias: OptionalNullable[Dict[str, float]] = UNSET,
        max_completion_tokens: OptionalNullable[int] = UNSET,
        max_tokens: OptionalNullable[int] = UNSET,
        n: OptionalNullable[int] = UNSET,
        parallel_tool_calls: OptionalNullable[bool] = UNSET,
        presence_penalty: OptionalNullable[float] = UNSET,
        response_format: OptionalNullable[
            Union[models.ResponseFormat, models.ResponseFormatTypedDict]
        ] = UNSET,
        seed: OptionalNullable[int] = UNSET,
        service_tier: OptionalNullable[str] = UNSET,
        stop: OptionalNullable[List[str]] = UNSET,
        stream: OptionalNullable[bool] = False,
        stream_options: OptionalNullable[
            Union[models.StreamOptions, models.StreamOptionsTypedDict]
        ] = UNSET,
        temperature: OptionalNullable[float] = UNSET,
        tool_choice: OptionalNullable[
            Union[models.ToolChoice, models.ToolChoiceTypedDict]
        ] = UNSET,
        tools: OptionalNullable[
            Union[
                List[models.ChatCompletionToolsParam],
                List[models.ChatCompletionToolsParamTypedDict],
            ]
        ] = UNSET,
        top_logprobs: OptionalNullable[int] = UNSET,
        top_p: OptionalNullable[float] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ChatCompletionResponse:
        r"""Create chat completions

        This function processes chat completion requests by determining whether to use streaming
        or non-streaming response handling based on the request payload. For streaming requests,
        it configures additional options to track token usage.

        ## Returns

        Returns a Response containing either:
        - A streaming SSE connection for real-time completions
        - A single JSON response for non-streaming completions

        ## Errors

        Returns an error status code if:
        - The request processing fails
        - The streaming/non-streaming handlers encounter errors
        - The underlying inference service returns an error

        :param messages: A list of messages comprising the conversation so far
        :param model: ID of the model to use
        :param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far
        :param function_call: Controls how the model responds to function calls
        :param functions: A list of functions the model may generate JSON inputs for
        :param logit_bias: Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        :param max_completion_tokens: The maximum number of tokens to generate in the chat completion
        :param max_tokens: The maximum number of tokens to generate in the chat completion
        :param n: How many chat completion choices to generate for each input message
        :param parallel_tool_calls: Whether to enable parallel tool calls.
        :param presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far
        :param response_format:
        :param seed: If specified, our system will make a best effort to sample deterministically
        :param service_tier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:  If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted. If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. When not set, the default behavior is 'auto'.
        :param stop: Up to 4 sequences where the API will stop generating further tokens
        :param stream: Whether to stream back partial progress. Must be false for this request type.
        :param stream_options:
        :param temperature: What sampling temperature to use, between 0 and 2
        :param tool_choice:
        :param tools: A list of tools the model may call
        :param top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
        :param top_p: An alternative to sampling with temperature
        :param user: A unique identifier representing your end-user
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateChatCompletionRequest(
            frequency_penalty=frequency_penalty,
            function_call=function_call,
            functions=functions,
            logit_bias=logit_bias,
            max_completion_tokens=max_completion_tokens,
            max_tokens=max_tokens,
            messages=utils.get_pydantic_model(
                messages, List[models.ChatCompletionMessage]
            ),
            model=model,
            n=n,
            parallel_tool_calls=parallel_tool_calls,
            presence_penalty=presence_penalty,
            response_format=utils.get_pydantic_model(
                response_format, OptionalNullable[models.ResponseFormat]
            ),
            seed=seed,
            service_tier=service_tier,
            stop=stop,
            stream=stream,
            stream_options=utils.get_pydantic_model(
                stream_options, OptionalNullable[models.StreamOptions]
            ),
            temperature=temperature,
            tool_choice=utils.get_pydantic_model(
                tool_choice, OptionalNullable[models.ToolChoice]
            ),
            tools=utils.get_pydantic_model(
                tools, OptionalNullable[List[models.ChatCompletionToolsParam]]
            ),
            top_logprobs=top_logprobs,
            top_p=top_p,
            user=user,
        )

        req = self._build_request(
            method="POST",
            path="/v1/chat/completions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateChatCompletionRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="chat_completions_create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ChatCompletionResponse)
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_async(
        self,
        *,
        messages: Union[
            List[models.ChatCompletionMessage],
            List[models.ChatCompletionMessageTypedDict],
        ],
        model: str,
        frequency_penalty: OptionalNullable[float] = UNSET,
        function_call: Optional[Any] = None,
        functions: OptionalNullable[List[Any]] = UNSET,
        logit_bias: OptionalNullable[Dict[str, float]] = UNSET,
        max_completion_tokens: OptionalNullable[int] = UNSET,
        max_tokens: OptionalNullable[int] = UNSET,
        n: OptionalNullable[int] = UNSET,
        parallel_tool_calls: OptionalNullable[bool] = UNSET,
        presence_penalty: OptionalNullable[float] = UNSET,
        response_format: OptionalNullable[
            Union[models.ResponseFormat, models.ResponseFormatTypedDict]
        ] = UNSET,
        seed: OptionalNullable[int] = UNSET,
        service_tier: OptionalNullable[str] = UNSET,
        stop: OptionalNullable[List[str]] = UNSET,
        stream: OptionalNullable[bool] = False,
        stream_options: OptionalNullable[
            Union[models.StreamOptions, models.StreamOptionsTypedDict]
        ] = UNSET,
        temperature: OptionalNullable[float] = UNSET,
        tool_choice: OptionalNullable[
            Union[models.ToolChoice, models.ToolChoiceTypedDict]
        ] = UNSET,
        tools: OptionalNullable[
            Union[
                List[models.ChatCompletionToolsParam],
                List[models.ChatCompletionToolsParamTypedDict],
            ]
        ] = UNSET,
        top_logprobs: OptionalNullable[int] = UNSET,
        top_p: OptionalNullable[float] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ChatCompletionResponse:
        r"""Create chat completions

        This function processes chat completion requests by determining whether to use streaming
        or non-streaming response handling based on the request payload. For streaming requests,
        it configures additional options to track token usage.

        ## Returns

        Returns a Response containing either:
        - A streaming SSE connection for real-time completions
        - A single JSON response for non-streaming completions

        ## Errors

        Returns an error status code if:
        - The request processing fails
        - The streaming/non-streaming handlers encounter errors
        - The underlying inference service returns an error

        :param messages: A list of messages comprising the conversation so far
        :param model: ID of the model to use
        :param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far
        :param function_call: Controls how the model responds to function calls
        :param functions: A list of functions the model may generate JSON inputs for
        :param logit_bias: Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        :param max_completion_tokens: The maximum number of tokens to generate in the chat completion
        :param max_tokens: The maximum number of tokens to generate in the chat completion
        :param n: How many chat completion choices to generate for each input message
        :param parallel_tool_calls: Whether to enable parallel tool calls.
        :param presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far
        :param response_format:
        :param seed: If specified, our system will make a best effort to sample deterministically
        :param service_tier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:  If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted. If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. When not set, the default behavior is 'auto'.
        :param stop: Up to 4 sequences where the API will stop generating further tokens
        :param stream: Whether to stream back partial progress. Must be false for this request type.
        :param stream_options:
        :param temperature: What sampling temperature to use, between 0 and 2
        :param tool_choice:
        :param tools: A list of tools the model may call
        :param top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
        :param top_p: An alternative to sampling with temperature
        :param user: A unique identifier representing your end-user
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateChatCompletionRequest(
            frequency_penalty=frequency_penalty,
            function_call=function_call,
            functions=functions,
            logit_bias=logit_bias,
            max_completion_tokens=max_completion_tokens,
            max_tokens=max_tokens,
            messages=utils.get_pydantic_model(
                messages, List[models.ChatCompletionMessage]
            ),
            model=model,
            n=n,
            parallel_tool_calls=parallel_tool_calls,
            presence_penalty=presence_penalty,
            response_format=utils.get_pydantic_model(
                response_format, OptionalNullable[models.ResponseFormat]
            ),
            seed=seed,
            service_tier=service_tier,
            stop=stop,
            stream=stream,
            stream_options=utils.get_pydantic_model(
                stream_options, OptionalNullable[models.StreamOptions]
            ),
            temperature=temperature,
            tool_choice=utils.get_pydantic_model(
                tool_choice, OptionalNullable[models.ToolChoice]
            ),
            tools=utils.get_pydantic_model(
                tools, OptionalNullable[List[models.ChatCompletionToolsParam]]
            ),
            top_logprobs=top_logprobs,
            top_p=top_p,
            user=user,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/chat/completions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateChatCompletionRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="chat_completions_create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ChatCompletionResponse)
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def stream(
        self,
        *,
        messages: Union[
            List[models.ChatCompletionMessage],
            List[models.ChatCompletionMessageTypedDict],
        ],
        model: str,
        frequency_penalty: OptionalNullable[float] = UNSET,
        function_call: Optional[Any] = None,
        functions: OptionalNullable[List[Any]] = UNSET,
        logit_bias: OptionalNullable[Dict[str, float]] = UNSET,
        max_completion_tokens: OptionalNullable[int] = UNSET,
        max_tokens: OptionalNullable[int] = UNSET,
        n: OptionalNullable[int] = UNSET,
        parallel_tool_calls: OptionalNullable[bool] = UNSET,
        presence_penalty: OptionalNullable[float] = UNSET,
        response_format: OptionalNullable[
            Union[models.ResponseFormat, models.ResponseFormatTypedDict]
        ] = UNSET,
        seed: OptionalNullable[int] = UNSET,
        service_tier: OptionalNullable[str] = UNSET,
        stop: OptionalNullable[List[str]] = UNSET,
        stream: Optional[bool] = True,
        stream_options: OptionalNullable[
            Union[models.StreamOptions, models.StreamOptionsTypedDict]
        ] = UNSET,
        temperature: OptionalNullable[float] = UNSET,
        tool_choice: OptionalNullable[
            Union[models.ToolChoice, models.ToolChoiceTypedDict]
        ] = UNSET,
        tools: OptionalNullable[
            Union[
                List[models.ChatCompletionToolsParam],
                List[models.ChatCompletionToolsParamTypedDict],
            ]
        ] = UNSET,
        top_logprobs: OptionalNullable[int] = UNSET,
        top_p: OptionalNullable[float] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> eventstreaming.EventStream[models.ChatCompletionsCreateStreamResponseBody]:
        r"""
        :param messages: A list of messages comprising the conversation so far
        :param model: ID of the model to use
        :param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far
        :param function_call: Controls how the model responds to function calls
        :param functions: A list of functions the model may generate JSON inputs for
        :param logit_bias: Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        :param max_completion_tokens: The maximum number of tokens to generate in the chat completion
        :param max_tokens: The maximum number of tokens to generate in the chat completion
        :param n: How many chat completion choices to generate for each input message
        :param parallel_tool_calls: Whether to enable parallel tool calls.
        :param presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far
        :param response_format:
        :param seed: If specified, our system will make a best effort to sample deterministically
        :param service_tier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:  If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted. If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. When not set, the default behavior is 'auto'.
        :param stop: Up to 4 sequences where the API will stop generating further tokens
        :param stream: Whether to stream back partial progress. Must be true for this request type.
        :param stream_options:
        :param temperature: What sampling temperature to use, between 0 and 2
        :param tool_choice:
        :param tools: A list of tools the model may call
        :param top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
        :param top_p: An alternative to sampling with temperature
        :param user: A unique identifier representing your end-user
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateChatCompletionStreamRequest(
            frequency_penalty=frequency_penalty,
            function_call=function_call,
            functions=functions,
            logit_bias=logit_bias,
            max_completion_tokens=max_completion_tokens,
            max_tokens=max_tokens,
            messages=utils.get_pydantic_model(
                messages, List[models.ChatCompletionMessage]
            ),
            model=model,
            n=n,
            parallel_tool_calls=parallel_tool_calls,
            presence_penalty=presence_penalty,
            response_format=utils.get_pydantic_model(
                response_format, OptionalNullable[models.ResponseFormat]
            ),
            seed=seed,
            service_tier=service_tier,
            stop=stop,
            stream=stream,
            stream_options=utils.get_pydantic_model(
                stream_options, OptionalNullable[models.StreamOptions]
            ),
            temperature=temperature,
            tool_choice=utils.get_pydantic_model(
                tool_choice, OptionalNullable[models.ToolChoice]
            ),
            tools=utils.get_pydantic_model(
                tools, OptionalNullable[List[models.ChatCompletionToolsParam]]
            ),
            top_logprobs=top_logprobs,
            top_p=top_p,
            user=user,
        )

        req = self._build_request(
            method="POST",
            path="/v1/chat/completions#stream",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="text/event-stream",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateChatCompletionStreamRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="chat_completions_create_stream",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "text/event-stream"):
            return eventstreaming.EventStream(
                http_res,
                lambda raw: utils.unmarshal_json(
                    raw, models.ChatCompletionsCreateStreamResponseBody
                ),
                sentinel="[DONE]",
            )
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def stream_async(
        self,
        *,
        messages: Union[
            List[models.ChatCompletionMessage],
            List[models.ChatCompletionMessageTypedDict],
        ],
        model: str,
        frequency_penalty: OptionalNullable[float] = UNSET,
        function_call: Optional[Any] = None,
        functions: OptionalNullable[List[Any]] = UNSET,
        logit_bias: OptionalNullable[Dict[str, float]] = UNSET,
        max_completion_tokens: OptionalNullable[int] = UNSET,
        max_tokens: OptionalNullable[int] = UNSET,
        n: OptionalNullable[int] = UNSET,
        parallel_tool_calls: OptionalNullable[bool] = UNSET,
        presence_penalty: OptionalNullable[float] = UNSET,
        response_format: OptionalNullable[
            Union[models.ResponseFormat, models.ResponseFormatTypedDict]
        ] = UNSET,
        seed: OptionalNullable[int] = UNSET,
        service_tier: OptionalNullable[str] = UNSET,
        stop: OptionalNullable[List[str]] = UNSET,
        stream: Optional[bool] = True,
        stream_options: OptionalNullable[
            Union[models.StreamOptions, models.StreamOptionsTypedDict]
        ] = UNSET,
        temperature: OptionalNullable[float] = UNSET,
        tool_choice: OptionalNullable[
            Union[models.ToolChoice, models.ToolChoiceTypedDict]
        ] = UNSET,
        tools: OptionalNullable[
            Union[
                List[models.ChatCompletionToolsParam],
                List[models.ChatCompletionToolsParamTypedDict],
            ]
        ] = UNSET,
        top_logprobs: OptionalNullable[int] = UNSET,
        top_p: OptionalNullable[float] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> eventstreaming.EventStreamAsync[
        models.ChatCompletionsCreateStreamResponseBody
    ]:
        r"""
        :param messages: A list of messages comprising the conversation so far
        :param model: ID of the model to use
        :param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far
        :param function_call: Controls how the model responds to function calls
        :param functions: A list of functions the model may generate JSON inputs for
        :param logit_bias: Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        :param max_completion_tokens: The maximum number of tokens to generate in the chat completion
        :param max_tokens: The maximum number of tokens to generate in the chat completion
        :param n: How many chat completion choices to generate for each input message
        :param parallel_tool_calls: Whether to enable parallel tool calls.
        :param presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far
        :param response_format:
        :param seed: If specified, our system will make a best effort to sample deterministically
        :param service_tier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:  If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted. If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee. When not set, the default behavior is 'auto'.
        :param stop: Up to 4 sequences where the API will stop generating further tokens
        :param stream: Whether to stream back partial progress. Must be true for this request type.
        :param stream_options:
        :param temperature: What sampling temperature to use, between 0 and 2
        :param tool_choice:
        :param tools: A list of tools the model may call
        :param top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
        :param top_p: An alternative to sampling with temperature
        :param user: A unique identifier representing your end-user
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateChatCompletionStreamRequest(
            frequency_penalty=frequency_penalty,
            function_call=function_call,
            functions=functions,
            logit_bias=logit_bias,
            max_completion_tokens=max_completion_tokens,
            max_tokens=max_tokens,
            messages=utils.get_pydantic_model(
                messages, List[models.ChatCompletionMessage]
            ),
            model=model,
            n=n,
            parallel_tool_calls=parallel_tool_calls,
            presence_penalty=presence_penalty,
            response_format=utils.get_pydantic_model(
                response_format, OptionalNullable[models.ResponseFormat]
            ),
            seed=seed,
            service_tier=service_tier,
            stop=stop,
            stream=stream,
            stream_options=utils.get_pydantic_model(
                stream_options, OptionalNullable[models.StreamOptions]
            ),
            temperature=temperature,
            tool_choice=utils.get_pydantic_model(
                tool_choice, OptionalNullable[models.ToolChoice]
            ),
            tools=utils.get_pydantic_model(
                tools, OptionalNullable[List[models.ChatCompletionToolsParam]]
            ),
            top_logprobs=top_logprobs,
            top_p=top_p,
            user=user,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/chat/completions#stream",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="text/event-stream",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateChatCompletionStreamRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="chat_completions_create_stream",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "text/event-stream"):
            return eventstreaming.EventStreamAsync(
                http_res,
                lambda raw: utils.unmarshal_json(
                    raw, models.ChatCompletionsCreateStreamResponseBody
                ),
                sentinel="[DONE]",
            )
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
